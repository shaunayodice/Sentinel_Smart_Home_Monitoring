#include <msp430.h>
#include <stdint.h>

#define CALADC_15V_30C  *((unsigned int *)0x1A1A)                 // Temperature Sensor Calibration-30 C
                                                                  // See device datasheet for TLV table memory mapping
#define CALADC_15V_85C  *((unsigned int *)0x1A1C)                 // Temperature Sensor Calibration-High Temperature (85 for Industrial, 105 for Extended)

volatile float temp;
volatile float IntDegF;
volatile float IntDegC;

int count;
int account = 0;
char result[100];
volatile int i = 0;

unsigned int motion;
unsigned int light;

int j = 0;
int y = 0;

#define BUTTON BIT2 //push button P4.1

void Sensor1();
void Sensor2();
void Sensor3();
void ADC_init();
void GPIO_init();

int main(void)
{
    WDTCTL = WDTPW | WDTHOLD;                                   // Stop WDT
    // Disable the GPIO power-on default high-impedance mode to activate
    // previously configured port settings
    PM5CTL0 &= ~LOCKLPM5;
    GPIO_init();
    //__bis_SR_register(LPM0_bits | GIE);                           // LPM0 with interrupts enabled
    //__no_operation();                                             // Only for debugger
    TB0CCTL0 |= CCIE;                                             // TBCCR0 interrupt enabled
    TB0CCR0 = 65535;
    TB0CTL = TBSSEL__ACLK | MC__UP;                               // ACLK, UP mode



    //__delay_cycles(400);                                          // Delay for reference settling


    while(1)
        {
            if(i == 0)
            {
                // Configure reference
                PMMCTL0_H = PMMPW_H;                                          // Unlock the PMM registers
                PMMCTL2 |= INTREFEN | TSENSOREN | REFVSEL_0;                  // Enable internal 1.5V reference and temperature sensor
                    ADC_init();
                    ADCCTL0 |= ADCENC + ADCSC + ADCMSC;
                    while ((ADCIFG & ADCIFG0) == 0);
                    _delay_cycles(2000);
                temp = ADCMEM0;
                ADCCTL0 &= ~ADCIFG0;
                IntDegC = (temp-CALADC_15V_30C)*(85-30)/(CALADC_15V_85C-CALADC_15V_30C)+30;
                IntDegF =((9*IntDegC)/5)+32;
                itoa(IntDegF,result,10);
                account =0;
                while(result[account]!='\0')
                              {
                                    while((UCA1IFG & UCTXIFG)==0);                                    //Wait Unitl the UART transmitter is ready //UCTXIFG
                                                          UCA1TXBUF = result[account++] ;                   //Transmit the received data.
                              }
                i = 0;
            }
            else if(i == 1)
            {

                Sensor2();
                ADCCTL0 &= ~ADCIFG0;
                i = 2;
            }
            else if (i == 2)
            {
                Sensor3();
                ADCCTL0 &= ~ADCIFG0;
                i = 0;
            }
        }


}


void GPIO_init(){
        // Configure the ADC A1 pin
        P1SEL0 |=  BIT3;
        P1SEL1 |=  BIT3;

        //PIR
        P2DIR &= ~BIT2; // P2.2 becomes input
        P2REN |= BIT2;
        P2OUT |= BIT2;

        //Photoresistor
        P1DIR &= ~BIT1; // P1.1 becomes input
        P1REN |= BIT1;
        P1OUT |= BIT1;

}


void ADC_init(){

    // Configure ADC - Pulse sample mode; ADCSC trigger
        ADCCTL0 |= ADCSHT_8 | ADCON;                                  // ADC ON,temperature sample period>30us
        ADCCTL1 |= ADCSHP;                                            // s/w trig, single ch/conv, MODOSC
        ADCCTL2 &= ~ADCRES;                                         // clear ADCRES in ADCCTL
        ADCCTL2 |= ADCRES_2;                                          // 12-bit conversion results
        ADCMCTL0 |= ADCSREF_1 | ADCINCH_1;                           // ADC input ch A1 => temp sense
        ADCIE |=ADCIE0;                                               // Enable the Interrupt request for a completed ADC_B conversion
}


void Sensor1() //DHT 11
{
    temp = ADCMEM0;
    // Temperature in Celsius
    // The temperature (Temp, C)=
    IntDegC = (temp-CALADC_15V_30C)*(85-30)/(CALADC_15V_85C-CALADC_15V_30C)+30;

    // Temperature in Fahrenheit
    // Tf = (9/5)*Tc | 32
    IntDegF =((9*IntDegC)/5)+32;
}

void Sensor2() ///PIR sensor
{
            if((P2IN & BUTTON) == 0x04){
            //_delay_cycles(5000);
            if((P2IN & BUTTON) == 0x04){
                j=1;
                if(j == 1){
                motion=1;
                }
                else {
                motion=0;
                }}
            }
            while((P2IN & BUTTON) == 0x04);
            j=0;
            motion=0;

        }

void Sensor3() ///Photoresistor sensor
{
            if((P1IN & BUTTON) == 0x08){
            //_delay_cycles(5000);
            if((P1IN & BUTTON) == 0x08){
                y=1;
                if(y == 1){
                light=1;
                }
                else {
                light=0;
                }}
            }
            while((P1IN & BUTTON) == 0x08);
            y=0;
            light=0;

        }



void strreverse(char* begin, char* end)      // Function to reverse the order of the ASCII char array elements
{
    char aux;
    while(end>begin)
        aux=*end, *end--=*begin, *begin++=aux;
}
void itoa(int value, char* str, int base) {  //Function to convert the signed int to an ASCII char array
    static char num[] = "0123456789abcdefghijklmnopqrstuvwxyz";
    char* wstr=str;
    int sign;
    // Validate that base is between 2 and 35 (inlcusive)
    if (base<2 || base>35){
        *wstr='\0';
        return;
    }
    // Get magnitude and th value
    sign=value;
    if (sign < 0)
        value = -value;
    do // Perform interger-to-string conversion.
        *wstr++ = num[value%base]; //create the next number in converse by taking the modolus
    while(value/=base);  // stop when you get  a 0 for the quotient
    if(sign<0) //attch sign character, if needed
        *wstr++='-';
    *wstr='\0'; //Attach a null character at end of char array. The string is in revers order at this point
    strreverse(str,wstr-1); // Reverse string
}
